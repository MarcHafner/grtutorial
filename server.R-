populate_scatterplot <- function(output, data) {

    data_scatterplot <- data[     c('Cell line','Small Molecule','GR50','GRmax')]
    colnames(data_scatterplot) <- c('cell line','drug',          'GR50','GRmax')

    data_scatterplot['log10[GR50]'] <- lapply(data_scatterplot['GR50'], log10)

    data_scatterplot
}

extractGridData <- function(input, output, data) {
if (!(is.null(input$choiceVar) || is.null(input$groupingVars) || is.null(input$EC50) ||
      is.null(input$Einf) && is.null(input$HillSlope))) {
  data1 <- data
  data1['cell line'] <- data[[input$choiceVar]]
  data1['drug'] <- do.call(paste, c(as.data.frame(data[input$groupingVars], stringsAsFactors=FALSE),sep="_"))
  data1['EC50'] <- data[input$EC50]
  data1['Einf'] <- data[input$Einf]
  data1['HillSlope'] <- data[input$HillSlope]
  data1['log10[EC50]'] <- lapply(data1['EC50'], log10)
  data1
} else {
  NULL
}
}

shinyServer(function(input,output,session) {
       datafile="SeedingDensity_72h_GR_metrics_2016-01-11.tsv"
       data <- read.table(datafile, sep="\t", header=TRUE, check.names=FALSE, fill=TRUE)

       data_scatterplot <- populate_scatterplot(output, data)
       output$scatter <- renderLiScatterplot(
         input="", # input$dataset,
         data_scatterplot
       )
    updateSelectizeInput(session, 'choiceVar', choices = colnames(data), server = TRUE, selected="Cell line")
    updateSelectizeInput(session, 'groupingVars', choices = colnames(data), server = TRUE, selected=c("Small Molecule","Seeding density"))
    updateSelectizeInput(session, 'EC50', choices = colnames(data), server = TRUE, selected="EC50 for GR curve")
    updateSelectizeInput(session, 'Einf', choices = colnames(data), server = TRUE, selected="Einf for GR curve")
    updateSelectizeInput(session, 'HillSlope', choices = colnames(data), server = TRUE, selected="Hill coeff. for GR curve")

    observeEvent(input$goButton, {

    output$'dose-response-grid-main' <- renderLiDoseResponseGrid(
       input="",
       xmin=isolate(input$xmin),
       xmax=isolate(input$xmax),
       {
         input$goButton

         isolate(extractGridData(input, output, data))
       }
     )

    })
})